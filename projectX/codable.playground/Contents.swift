import Foundation
struct User {
    /// The ID of the user. This corresponds with a Firebase user's uid property.
    var userID: String

    /// The display name of the user. Users with unspecified display names are given a default name.
    var name: String

    /// A url to the user's profile photo. Users with unspecified profile pictures are given a
    /// default profile picture.
    var photoURL: URL
    
    /// An email that user used to register an account
    var email: String

    /// An optional title that user can earn for  ....
    var title: String?

    /// Optional title can be followed up by some special symbol: star, light bubble etc...
    /// that will be chosen from the set of given options
    var titleImage: String?
}
extension User:  Codable{}
struct Post: Codable{
    /// A unique ID identifying the post, generated by Firestore.
    var documentID: String

    /// station where post is posted.
    var stationID: String

    /// The name of the station.
    var stationName: String

    /// The number of likes of the post.
    var likes: Int

    /// User information duplicated in the post object.
    var userInfo: User

    /// The title of the post.
    var title: String
    
    /// The body text of the post.
    var text: String?

    /// The date the review was posted.
    var date: Date
    
    /// Post photo url stored in the Firestore
    var imageURL: URL?
}

let encoder = JSONEncoder()
encoder.outputFormatting = .prettyPrinted
let decoder = JSONDecoder()
let user = User(userID: "1", name: "Paul", photoURL: URL(string: "1")!, email: "@gmail", title: "Saul")
let post = Post(documentID: "123", stationID: "123", stationName: "UCSC", likes: 12, userInfo: user, title: "FIRE AGAIN", date: Date())
let data = try encoder.encode(post)
print(String(data: data, encoding: .utf8)!)

if let json = try JSONSerialization.jsonObject(with: data, options: []) as? [String: Any] {
    // try to read out a string array
    print(json)
}

do{
    let decodedData = try decoder.decode(Post.self, from: data)
    print(decodedData)
}catch{
    print(error)
}

